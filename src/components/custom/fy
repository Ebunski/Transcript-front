Certainly! You can create a middleware function in Redux to automatically set a variable based on the grade. Middleware in Redux allows you to intercept actions and perform additional operations before they reach the reducer.

First, let's define the middleware function:

```javascript
const gradeMiddleware = store => next => action => {
  if (action.type === 'student/createNewStudent') {
    const grade = action.payload.grade;

    let gradeCategory;
    if (grade >= 70) {
      gradeCategory = 'distinction';
    } else if (grade <= 49) {
      gradeCategory = 'fail';
    } else {
      gradeCategory = 'pass';
    }

    // Add the gradeCategory to the action payload
    action.payload.gradeCategory = gradeCategory;
  }

  return next(action);
};

export default gradeMiddleware;
```

Next, you need to apply this middleware when you configure your store:

```javascript
import { configureStore } from '@reduxjs/toolkit';
import studentReducer from './path/to/studentSlice';
import gradeMiddleware from './path/to/gradeMiddleware';

const store = configureStore({
  reducer: {
    student: studentReducer,
    // other reducers
  },
  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(gradeMiddleware),
});

export default store;
```

Now, whenever the `createNewStudent` action is dispatched, the middleware will intercept it, calculate the `gradeCategory` based on the grade, and add it to the action payload before it reaches the reducer.

Here's a quick overview of the complete setup:

1. **Middleware function** (`gradeMiddleware.js`):

   ```javascript
   const gradeMiddleware = store => next => action => {
     if (action.type === 'student/createNewStudent') {
       const grade = action.payload.grade;

       let gradeCategory;
       if (grade >= 70) {
         gradeCategory = 'distinction';
       } else if (grade <= 49) {
         gradeCategory = 'fail';
       } else {
         gradeCategory = 'pass';
       }

       // Add the gradeCategory to the action payload
       action.payload.gradeCategory = gradeCategory;
     }

     return next(action);
   };

   export default gradeMiddleware;
   ```

2. **Store configuration** (`store.js`):

   ```javascript
   import { configureStore } from '@reduxjs/toolkit';
   import studentReducer from './path/to/studentSlice';
   import gradeMiddleware from './path/to/gradeMiddleware';

   const store = configureStore({
     reducer: {
       student: studentReducer,
       // other reducers
     },
     middleware: getDefaultMiddleware => getDefaultMiddleware().concat(gradeMiddleware),
   });

   export default store;
   ```

3. **Reducer with the `createNewStudent` action** (`studentSlice.js`):

   ```javascript
   import { createSlice } from '@reduxjs/toolkit';

   const initialState = {
     newStudent: [] // or {}, depending on your structure
   };

   const studentSlice = createSlice({
     name: 'student',
     initialState,
     reducers: {
       createNewStudent: (state, { payload }) => {
         state.newStudent = [...state.newStudent, payload];
       },
       // other reducers
     },
   });

   export const { createNewStudent } = studentSlice.actions;
   export default studentSlice.reducer;
   ```

With this setup, when you dispatch the `createNewStudent` action, the `gradeCategory` will be automatically set based on the grade value.